<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.measure.LiveMeasureMapper">

  <sql id="columns">
    lm.uuid as uuid,
    lm.component_uuid as componentUuid,
    lm.project_uuid as projectUuid,
    lm.metric_id as metricId,
    lm.value as value,
    lm.text_value as textValue,
    lm.measure_data as data,
    lm.variation as variation,
    lm.gate_status as gateStatus,
    lm.gate_text as gateText
  </sql>

  <insert id="insert" parameterType="map" useGeneratedKeys="false">
    insert into live_measures (
    uuid,
    component_uuid,
    project_uuid,
    metric_id,
    value,
    text_value,
    variation,
    measure_data,
    gate_status,
    gate_text,
    created_at,
    updated_at
    ) values (
    #{dto.uuid, jdbcType=VARCHAR},
    #{dto.componentUuid, jdbcType=VARCHAR},
    #{dto.projectUuid, jdbcType=VARCHAR},
    #{dto.metricId, jdbcType=INTEGER},
    #{dto.value, jdbcType=DOUBLE},
    #{dto.textValue, jdbcType=VARCHAR},
    #{dto.variation, jdbcType=DOUBLE},
    #{dto.data, jdbcType=BINARY},
    #{dto.gateStatus, jdbcType=VARCHAR},
    #{dto.gateText, jdbcType=VARCHAR},
    #{now, jdbcType=BIGINT},
    #{now, jdbcType=BIGINT}
    )
  </insert>

  <update id="update" parameterType="map" useGeneratedKeys="false">
    update live_measures set
    value = #{dto.value, jdbcType=DOUBLE},
    variation = #{dto.variation, jdbcType=DOUBLE},
    gate_status = #{dto.gateStatus, jdbcType=VARCHAR},
    gate_text = #{dto.gateText, jdbcType=VARCHAR},
    updated_at = #{now, jdbcType=BIGINT}
    where uuid = #{dto.uuid, jdbcType=VARCHAR}
  </update>

  <delete id="deleteByProjectUuid" parameterType="String">
    delete from live_measures
    where project_uuid = #{projectUuid, jdbcType=VARCHAR}
  </delete>

  <select id="selectByComponentUuids" parameterType="map" resultType="org.sonar.db.measure.LiveMeasureDto">
    select <include refid="columns"/> from live_measures lm
    where
    lm.metric_id in <foreach item="metricId" collection="metricIds" open="(" separator="," close=")">#{metricId, jdbcType=INTEGER}</foreach>
    and lm.component_uuid in
    <foreach item="componentUuid" collection="componentUuids" open="(" separator="," close=")">
      #{componentUuid, jdbcType=VARCHAR}
    </foreach>
  </select>

  <select id="selectTreeByQuery" parameterType="map" resultType="org.sonar.db.measure.LiveMeasureDto" fetchSize="${_scrollFetchSize}" resultSetType="FORWARD_ONLY">
    select <include refid="columns"/> from live_measures lm
    inner join projects p on p.uuid = lm.component_uuid
    <!-- TODO do we really need another join on projects ? Using lm.project_uuid should be enough -->
    <include refid="org.sonar.db.component.ComponentMapper.selectDescendantsJoins"/>
    <where>
      <if test="query.getMetricIds() != null">
        lm.metric_id in
        <foreach item="metricId" collection="query.getMetricIds()" open="(" separator="," close=")">#{metricId,jdbcType=INTEGER}</foreach>
      </if>
      <include refid="org.sonar.db.component.ComponentMapper.selectDescendantsFilters"/>
    </where>

    -- Add measures of base component
    union all
    select <include refid="columns"/> from live_measures lm
    inner join projects p on p.uuid = lm.component_uuid and lm.component_uuid = #{baseUuid, jdbcType=VARCHAR}
    <where>
      <if test="query.getMetricIds() != null">
        lm.metric_id in
        <foreach item="metricId" collection="query.getMetricIds()" open="(" separator="," close=")">#{metricId,jdbcType=INTEGER}</foreach>
      </if>
      <include refid="org.sonar.db.component.ComponentMapper.selectDescendantsFilters"/>
    </where>
  </select>
</mapper>
