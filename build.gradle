buildscript {
  repositories {
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
  }
  dependencies {
    classpath 'io.spring.gradle:dependency-management-plugin:1.0.0.RELEASE'
    classpath "com.netflix.nebula:gradle-extra-configurations-plugin:3.1.0"
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
    classpath 'com.moowork.gradle:gradle-node-plugin:1.1.1'
    classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0'
  }
}

// TODO improve
def buildNumber = System.env.'TRAVIS_BUILD_NUMBER' ?: (/* SonarSource infrastructure: */ System.env.'CI_BUILD_NUMBER' ?: null)
def versionSuffix = buildNumber == null
  ? '-SNAPSHOT'
  : ('.0.' + buildNumber)

allprojects {
  apply plugin: 'com.jfrog.artifactory'

  group = 'org.sonarsource.sonarqube'
  version = '6.4' + versionSuffix

  repositories {
    mavenLocal()
    mavenCentral()
  }
}

subprojects {
  apply plugin: 'nebula.provided-base'

  // even if it has troubles with dynamic versions ( https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/151 )
  // in contrast to nebula-dependency-recommender it supports not just versions, but also exclusions
  apply plugin: 'io.spring.dependency-management'
  dependencyManagement {
    imports {
      mavenBom 'org.sonarsource.sonarqube:sonarqube:6.4' + versionSuffix
    }
  }

  apply plugin: 'java'
  sourceCompatibility = 1.8
  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }

  def tempDir = file("$buildDir/temp")
  test.doFirst {
    // TODO note that due to this any change in this file (even addition of blank line) is considered as modification of input for tests
    delete tempDir
    tempDir.mkdirs()
  }
  test {
    systemProperty 'java.io.tmpdir', tempDir
    maxHeapSize = "512m"
  }

  apply plugin: 'com.google.protobuf'
  sourceSets.main.proto.srcDir 'src/main/protobuf'  // in addition to the default 'src/main/proto'
  sourceSets.test.proto.srcDir 'src/test/protobuf'  // in addition to the default 'src/test/proto'
  protobuf {
    protoc {
      artifact = 'com.google.protobuf:protoc:3.0.0-beta-2'
    }
  }
}

configurations {
  archives
}

// TODO requires review
artifactory {
  clientConfig.setIncludeEnvVars(true)
  clientConfig.setEnvVarsExcludePatterns('*password*,*PASSWORD*,*secret*,*MAVEN_CMD_LINE_ARGS*,sun.java.command,*token*,*TOKEN*,*LOGIN*,*login*')
  contextUrl = System.getenv('ARTIFACTORY_URL')
  publish {
    repository {
      repoKey = System.getenv('ARTIFACTORY_DEPLOY_REPO')
      username = System.getenv('ARTIFACTORY_DEPLOY_USERNAME')
      password = System.getenv('ARTIFACTORY_DEPLOY_PASSWORD')
    }
    defaults {
      properties = [
        'vcs.revision': (System.getenv('GIT_COMMIT') ?: System.getenv('TRAVIS_COMMIT')),
        'vcs.branch': (System.getenv('GIT_BRANCH') ?: System.getenv('TRAVIS_BRANCH')),
        'build.name': 'sonarlint-intellij',
        'build.number': (System.getenv('BUILD_ID') ?: System.getenv('TRAVIS_BUILD_NUMBER'))
      ]
      publishConfigs('archives')
      publishPom = true // Publish generated POM files to Artifactory (true by default)
      publishIvy = false // Publish generated Ivy descriptor files to Artifactory (true by default)
    }
  }
  clientConfig.info.setBuildNumber(System.getenv('TRAVIS_BUILD_NUMBER'))
}

artifactoryPublish.mavenDescriptor = file('pom.xml')
